// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wasit.Context;

#nullable disable

namespace Wasit.Context.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240811105056_AddCategoryEstateTypeEntity")]
    partial class AddCategoryEstateTypeEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Wasit.Core.Entities.AddPriceToEstate.P4AddPriceToEstate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AddPriceCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SubscriptionDays")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("P4AddPriceToEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.AddPriceToEstate.S4AddPriceToEstate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AddPriceCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<string>("PDescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PSubscriptionDays")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RemainingAddPriceCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("S4AddPriceToEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.Advantage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Advantages");
                });

            modelBuilder.Entity("Wasit.Core.Entities.AppImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AppImgs");
                });

            modelBuilder.Entity("Wasit.Core.Entities.Copon.Copon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CountUsed")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Expirdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("limtDiscount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Copon");
                });

            modelBuilder.Entity("Wasit.Core.Entities.Copon.CoponUsed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoponId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoponUsed");
                });

            modelBuilder.Entity("Wasit.Core.Entities.CustomerOpinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomerOpinions");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BookingFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BookingTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("DayRentPrice")
                        .HasColumnType("float");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Developable")
                        .HasColumnType("bit");

                    b.Property<double>("EstateArea")
                        .HasColumnType("float");

                    b.Property<string>("EstateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EstateTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EstateTypeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("DailyRentEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstateFavorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("DailyRentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DailyRentEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("DailyRentEstateFavorites");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstateImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("DailyRentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DailyRentEstateId");

                    b.ToTable("DailyRentEstateImages");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstateSpecificationValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("DailyRentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EstateTypeSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SpecificationValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DailyRentEstateId");

                    b.HasIndex("EstateTypeSpecificationId");

                    b.ToTable("DailyRentEstateSpecificationValues");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CancelStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("DailyRentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstateComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstateRating")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEstateReceived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OwnerRating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("OwnerRatingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShowComment")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UserRating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UserRatingDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DailyRentEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("DailyRentRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.ReportDailyRentComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("DailyRentRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonForReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DailyRentRequestId");

                    b.HasIndex("ReporterId");

                    b.ToTable("ReportDailyRentComments");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BookingFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BookingTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("DayRentPrice")
                        .HasColumnType("float");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Developable")
                        .HasColumnType("bit");

                    b.Property<double>("EstateArea")
                        .HasColumnType("float");

                    b.Property<string>("EstateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EstateTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EstateTypeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("EntertainmentEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstateFavorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntertainmentEstateId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EntertainmentEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("EntertainmentEstateFavorites");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstateImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntertainmentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntertainmentEstateId");

                    b.ToTable("EntertainmentEstateImages");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstateSpecificationValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntertainmentEstateId")
                        .HasColumnType("bigint");

                    b.Property<long>("EstateTypeSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SpecificationValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntertainmentEstateId");

                    b.HasIndex("EstateTypeSpecificationId");

                    b.ToTable("EntertainmentEstateSpecificationValues");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CancelStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntertainmentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("EstateComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstateRating")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEstateReceived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OwnerRating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("OwnerRatingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShowComment")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UserRating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UserRatingDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntertainmentEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("EntertainmentRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.ReportEntertainmentComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntertainmentRequestId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonForReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntertainmentRequestId");

                    b.HasIndex("ReporterId");

                    b.ToTable("ReportEntertainmentComments");
                });

            modelBuilder.Entity("Wasit.Core.Entities.Enum.NotificationCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NotificationCategory");
                });

            modelBuilder.Entity("Wasit.Core.Entities.Enum.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.CategoryEstateTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long?>("CategoryId1")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstateTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("EstateTypeId1")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId1");

                    b.HasIndex("EstateTypeId1");

                    b.ToTable("CategoryEstateTypes");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.EstateType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EstateTypes");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.EstateTypeSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EstateTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<long>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstateTypeId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("EstateTypeSpecifications");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.Specification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("Wasit.Core.Entities.IntroContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IntroContactUs");
                });

            modelBuilder.Entity("Wasit.Core.Entities.IntroSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutAppAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutAppEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutAppImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutDescrioptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutDescrioptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppleStoreUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaceBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterDescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterDescriptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GooglePlayUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroImg1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroImg2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivacyPolicyAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivacyPolicyEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsOfUsersAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsOfUsersEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IntroSettings");
                });

            modelBuilder.Entity("Wasit.Core.Entities.NOTIFIC.NotificationQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<int?>("NotificationCategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("NotificationTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NotificationCategoryId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("NotificationQueue");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.ApartmentRentPay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AppTax")
                        .HasColumnType("float");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EstateApartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("PublisherNetTotal")
                        .HasColumnType("float");

                    b.Property<double>("RentalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EstateApartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("ApartmentRentPays");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.EstateApartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRentPaid")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDeadline")
                        .HasColumnType("int");

                    b.Property<long>("RentalOrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("RentalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RentalOrderId");

                    b.ToTable("EstateApartments");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.MaintenanceOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("EstateArea")
                        .HasColumnType("float");

                    b.Property<string>("EstateImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UserRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("MaintenanceOrders");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.RentalManagementOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstateImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("RentalManagementOrders");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Developable")
                        .HasColumnType("bit");

                    b.Property<double>("EstateArea")
                        .HasColumnType("float");

                    b.Property<string>("EstateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EstateTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MonthRentPrice")
                        .HasColumnType("float");

                    b.Property<double>("PaidRentPrice")
                        .HasColumnType("float");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EstateTypeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("RentEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstateFavorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RentEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("RentEstateFavorites");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstateImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RentEstateId");

                    b.ToTable("RentEstateImages");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstateSpecificationValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EstateTypeSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("SpecificationValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstateTypeSpecificationId");

                    b.HasIndex("RentEstateId");

                    b.ToTable("RentEstateSpecificationValues");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentRatingRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RatingStatus")
                        .HasColumnType("int");

                    b.Property<long>("RentEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReportUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ReviewerRating")
                        .HasColumnType("float");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RentEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("RentRatingRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEstateRented")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<int>("MonthCount")
                        .HasColumnType("int");

                    b.Property<double>("OwnerRating")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RentEstateId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("RentRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentReservationRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<long>("RentEstateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RentEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("RentReservationRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.PricingRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AdminPrice")
                        .HasColumnType("float");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<long>("SaleEstateId")
                        .HasColumnType("bigint");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SaleEstateId");

                    b.ToTable("PricingRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.PurchaseRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<bool>("HasRefundRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEstateReceived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SaleEstateId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SaleEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<bool>("Developable")
                        .HasColumnType("bit");

                    b.Property<double>("EstateArea")
                        .HasColumnType("float");

                    b.Property<string>("EstateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstatePrice")
                        .HasColumnType("float");

                    b.Property<long>("EstateTypeId")
                        .HasColumnType("bigint");

                    b.Property<double>("FinalEstatePrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EstateTypeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("SaleEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstateFavorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("SaleEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SaleEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("SaleEstateFavorites");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstateImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("SaleEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SaleEstateId");

                    b.ToTable("SaleEstateImages");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstateSpecificationValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EstateTypeSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("SaleEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("SpecificationValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstateTypeSpecificationId");

                    b.HasIndex("SaleEstateId");

                    b.ToTable("SaleEstateSpecificationValues");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleRatingRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RatingStatus")
                        .HasColumnType("int");

                    b.Property<string>("ReportUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SaleEstateId")
                        .HasColumnType("bigint");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UserRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SaleEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("SaleRatingRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleReservationRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<long>("SaleEstateId")
                        .HasColumnType("bigint");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("float");

                    b.Property<int>("TypePay")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SaleEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("SaleReservationRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.UserPriceToEstate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long>("SaleEstateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SaleEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPriceToEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.Advertisment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Advertisments");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.ContactUs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.ContactUsSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUsSubjects");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.HistoryNotify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryNotify");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.LogExption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogExption");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMada")
                        .HasColumnType("bit");

                    b.Property<string>("LiveAccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveCheckoutUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MadaEntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestAccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestCheckoutUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViMaEntityId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.QuestionProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionProvider");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.QuestionsClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionsClient");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutUsAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutUsEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionsBrokerAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionsBrokerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionsDelegateAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionsDelegateEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionsDeveloperAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionsDeveloperEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionsOwnerAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CondtionsOwnerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password_SMS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId_FCM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName_SMS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerKey_FCM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName_SMS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.SmsMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmsMessages");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.AdminNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte?>("CategoryType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdminNotifications");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.ApplicationDbUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccOwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<bool>("ActiveCode")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowNotify")
                        .HasColumnType("bit");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrokerageDocumentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FacilityType")
                        .HasColumnType("int");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IbanNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("Lang")
                        .HasColumnType("int");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wallet")
                        .HasColumnType("float");

                    b.Property<string>("WorkingNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.DeviceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId_")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceIds");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("CategoryType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wasit.Core.Entities.AddPriceToEstate.S4AddPriceToEstate", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("S4AddPriceToEstates")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstate", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateType", "EstateType")
                        .WithMany("DailyRentEstates")
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.Region", "Region")
                        .WithMany("DailyRentEstates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("DailyRentEstates")
                        .HasForeignKey("UserId");

                    b.Navigation("EstateType");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstateFavorite", b =>
                {
                    b.HasOne("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstate", "DailyRentEstate")
                        .WithMany("Favorites")
                        .HasForeignKey("DailyRentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("DailyRentEstateFavorites")
                        .HasForeignKey("UserId");

                    b.Navigation("DailyRentEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstateImage", b =>
                {
                    b.HasOne("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstate", "DailyRentEstate")
                        .WithMany("Images")
                        .HasForeignKey("DailyRentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyRentEstate");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstateSpecificationValue", b =>
                {
                    b.HasOne("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstate", "DailyRentEstate")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("DailyRentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateTypeSpecification", "EstateTypeSpecification")
                        .WithMany("DailyRentEstateSpecificationValues")
                        .HasForeignKey("EstateTypeSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyRentEstate");

                    b.Navigation("EstateTypeSpecification");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstate", "DailyRentEstate")
                        .WithMany("Requests")
                        .HasForeignKey("DailyRentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("DailyRentRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("DailyRentEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.ReportDailyRentComment", b =>
                {
                    b.HasOne("Wasit.Core.Entities.DailyRentEstateSection.DailyRentRequest", "DailyRentRequest")
                        .WithMany("ReportDailyRentComments")
                        .HasForeignKey("DailyRentRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "Reporter")
                        .WithMany("ReportDailyRentComments")
                        .HasForeignKey("ReporterId");

                    b.Navigation("DailyRentRequest");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstate", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateType", "EstateType")
                        .WithMany("EntertainmentEstates")
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.Region", "Region")
                        .WithMany("EntertainmentEstates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("EntertainmentEstates")
                        .HasForeignKey("UserId");

                    b.Navigation("EstateType");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstateFavorite", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstate", "EntertainmentEstate")
                        .WithMany("Favorites")
                        .HasForeignKey("EntertainmentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("EntertainmentEstateFavorites")
                        .HasForeignKey("UserId");

                    b.Navigation("EntertainmentEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstateImage", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstate", "EntertainmentEstate")
                        .WithMany("Images")
                        .HasForeignKey("EntertainmentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntertainmentEstate");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstateSpecificationValue", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstate", "EntertainmentEstate")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("EntertainmentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateTypeSpecification", "EstateTypeSpecification")
                        .WithMany("EntertainmentEstateSpecificationValues")
                        .HasForeignKey("EstateTypeSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntertainmentEstate");

                    b.Navigation("EstateTypeSpecification");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstate", "EntertainmentEstate")
                        .WithMany("Requests")
                        .HasForeignKey("EntertainmentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("EntertainmentRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("EntertainmentEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.ReportEntertainmentComment", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentRequest", "EntertainmentRequest")
                        .WithMany("ReportEntertainmentComments")
                        .HasForeignKey("EntertainmentRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "Reporter")
                        .WithMany("ReportEntertainmentComments")
                        .HasForeignKey("ReporterId");

                    b.Navigation("EntertainmentRequest");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.CategoryEstateTypes", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EstateCategories.Category", "Category")
                        .WithMany("CategoryEstateTypes")
                        .HasForeignKey("CategoryId1");

                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateType", "EstateType")
                        .WithMany("CategoryEstateTypes")
                        .HasForeignKey("EstateTypeId1");

                    b.Navigation("Category");

                    b.Navigation("EstateType");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.EstateTypeSpecification", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateType", "EstateType")
                        .WithMany("EstateTypeSpecifications")
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.EstateCategories.Specification", "Specification")
                        .WithMany("EstateSpecifications")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstateType");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Wasit.Core.Entities.NOTIFIC.NotificationQueue", b =>
                {
                    b.HasOne("Wasit.Core.Entities.Enum.NotificationCategory", "NotificationCategory")
                        .WithMany()
                        .HasForeignKey("NotificationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.Enum.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationCategory");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.ApartmentRentPay", b =>
                {
                    b.HasOne("Wasit.Core.Entities.PropertiesManagement.EstateApartment", "EstateApartment")
                        .WithMany("ApartmentRentPays")
                        .HasForeignKey("EstateApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("ApartmentRentPays")
                        .HasForeignKey("UserId");

                    b.Navigation("EstateApartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.EstateApartment", b =>
                {
                    b.HasOne("Wasit.Core.Entities.PropertiesManagement.RentalManagementOrder", "RentalOrder")
                        .WithMany("EstateApartments")
                        .HasForeignKey("RentalOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalOrder");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.MaintenanceOrder", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "Provider")
                        .WithMany("ProviderMaintenanceOrders")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Wasit.Core.Entities.UserTables.Region", "Region")
                        .WithMany("MaintenanceOrders")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("UserMaintenanceOrders")
                        .HasForeignKey("UserId");

                    b.Navigation("Provider");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.RentalManagementOrder", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.Region", "Region")
                        .WithMany("RentalManagementOrders")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("RentalManagementOrders")
                        .HasForeignKey("UserId");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstate", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateType", "EstateType")
                        .WithMany("RentEstates")
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.Region", "Region")
                        .WithMany("RentEstates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("RentEstates")
                        .HasForeignKey("UserId");

                    b.Navigation("EstateType");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstateFavorite", b =>
                {
                    b.HasOne("Wasit.Core.Entities.RentEstateSection.RentEstate", "RentEstate")
                        .WithMany("Favorites")
                        .HasForeignKey("RentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("RentEstateFavorites")
                        .HasForeignKey("UserId");

                    b.Navigation("RentEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstateImage", b =>
                {
                    b.HasOne("Wasit.Core.Entities.RentEstateSection.RentEstate", "RentEstate")
                        .WithMany("Images")
                        .HasForeignKey("RentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentEstate");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstateSpecificationValue", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateTypeSpecification", "EstateTypeSpecification")
                        .WithMany("RentEstateSpecificationValues")
                        .HasForeignKey("EstateTypeSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.RentEstateSection.RentEstate", "RentEstate")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("RentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstateTypeSpecification");

                    b.Navigation("RentEstate");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentRatingRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "Provider")
                        .WithMany("ProviderRentRatingRequests")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Wasit.Core.Entities.RentEstateSection.RentEstate", "RentEstate")
                        .WithMany("RatingRequests")
                        .HasForeignKey("RentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("UserRentRatingRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("Provider");

                    b.Navigation("RentEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.RentEstateSection.RentEstate", "RentEstate")
                        .WithMany("RentRequests")
                        .HasForeignKey("RentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("RentRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("RentEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentReservationRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.RentEstateSection.RentEstate", "RentEstate")
                        .WithMany("ReservationRequests")
                        .HasForeignKey("RentEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("RentReservationRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("RentEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.PricingRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.SaleEstateSection.SaleEstate", "SaleEstate")
                        .WithMany("PricingRequests")
                        .HasForeignKey("SaleEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleEstate");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.PurchaseRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.SaleEstateSection.SaleEstate", "SaleEstate")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("SaleEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("SaleEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstate", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateType", "EstateType")
                        .WithMany("SaleEstates")
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.Region", "Region")
                        .WithMany("SaleEstates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("SaleEstates")
                        .HasForeignKey("UserId");

                    b.Navigation("EstateType");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstateFavorite", b =>
                {
                    b.HasOne("Wasit.Core.Entities.SaleEstateSection.SaleEstate", "SaleEstate")
                        .WithMany("Favorites")
                        .HasForeignKey("SaleEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("SaleEstateFavorites")
                        .HasForeignKey("UserId");

                    b.Navigation("SaleEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstateImage", b =>
                {
                    b.HasOne("Wasit.Core.Entities.SaleEstateSection.SaleEstate", "SaleEstate")
                        .WithMany("Images")
                        .HasForeignKey("SaleEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleEstate");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstateSpecificationValue", b =>
                {
                    b.HasOne("Wasit.Core.Entities.EstateCategories.EstateTypeSpecification", "EstateTypeSpecification")
                        .WithMany("SaleEstateSpecificationValues")
                        .HasForeignKey("EstateTypeSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.SaleEstateSection.SaleEstate", "SaleEstate")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("SaleEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstateTypeSpecification");

                    b.Navigation("SaleEstate");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleRatingRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "Provider")
                        .WithMany("ProviderSaleRatingRequests")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Wasit.Core.Entities.SaleEstateSection.SaleEstate", "SaleEstate")
                        .WithMany("RatingRequests")
                        .HasForeignKey("SaleEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("UserSaleRatingRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("Provider");

                    b.Navigation("SaleEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleReservationRequest", b =>
                {
                    b.HasOne("Wasit.Core.Entities.SaleEstateSection.SaleEstate", "SaleEstate")
                        .WithMany("ReservationRequests")
                        .HasForeignKey("SaleEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("SaleReservationRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("SaleEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.UserPriceToEstate", b =>
                {
                    b.HasOne("Wasit.Core.Entities.SaleEstateSection.SaleEstate", "SaleEstate")
                        .WithMany("UserPriceToEstates")
                        .HasForeignKey("SaleEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("UserPriceToEstates")
                        .HasForeignKey("UserId");

                    b.Navigation("SaleEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.ContactUs", b =>
                {
                    b.HasOne("Wasit.Core.Entities.SettingTables.ContactUsSubject", "Subject")
                        .WithMany("ContactUs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.HistoryNotify", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("HistoryNotify")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.ApplicationDbUser", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.Region", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.DeviceId", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("DeviceIds")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.Notification", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.ApplicationDbUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.Region", b =>
                {
                    b.HasOne("Wasit.Core.Entities.UserTables.City", "City")
                        .WithMany("Regions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentEstate", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("Requests");

                    b.Navigation("SpecificationValues");
                });

            modelBuilder.Entity("Wasit.Core.Entities.DailyRentEstateSection.DailyRentRequest", b =>
                {
                    b.Navigation("ReportDailyRentComments");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentEstate", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("Requests");

                    b.Navigation("SpecificationValues");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EntertainmentEstateSection.EntertainmentRequest", b =>
                {
                    b.Navigation("ReportEntertainmentComments");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.Category", b =>
                {
                    b.Navigation("CategoryEstateTypes");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.EstateType", b =>
                {
                    b.Navigation("CategoryEstateTypes");

                    b.Navigation("DailyRentEstates");

                    b.Navigation("EntertainmentEstates");

                    b.Navigation("EstateTypeSpecifications");

                    b.Navigation("RentEstates");

                    b.Navigation("SaleEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.EstateTypeSpecification", b =>
                {
                    b.Navigation("DailyRentEstateSpecificationValues");

                    b.Navigation("EntertainmentEstateSpecificationValues");

                    b.Navigation("RentEstateSpecificationValues");

                    b.Navigation("SaleEstateSpecificationValues");
                });

            modelBuilder.Entity("Wasit.Core.Entities.EstateCategories.Specification", b =>
                {
                    b.Navigation("EstateSpecifications");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.EstateApartment", b =>
                {
                    b.Navigation("ApartmentRentPays");
                });

            modelBuilder.Entity("Wasit.Core.Entities.PropertiesManagement.RentalManagementOrder", b =>
                {
                    b.Navigation("EstateApartments");
                });

            modelBuilder.Entity("Wasit.Core.Entities.RentEstateSection.RentEstate", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("RatingRequests");

                    b.Navigation("RentRequests");

                    b.Navigation("ReservationRequests");

                    b.Navigation("SpecificationValues");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SaleEstateSection.SaleEstate", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("PricingRequests");

                    b.Navigation("PurchaseRequests");

                    b.Navigation("RatingRequests");

                    b.Navigation("ReservationRequests");

                    b.Navigation("SpecificationValues");

                    b.Navigation("UserPriceToEstates");
                });

            modelBuilder.Entity("Wasit.Core.Entities.SettingTables.ContactUsSubject", b =>
                {
                    b.Navigation("ContactUs");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.ApplicationDbUser", b =>
                {
                    b.Navigation("ApartmentRentPays");

                    b.Navigation("DailyRentEstateFavorites");

                    b.Navigation("DailyRentEstates");

                    b.Navigation("DailyRentRequests");

                    b.Navigation("DeviceIds");

                    b.Navigation("EntertainmentEstateFavorites");

                    b.Navigation("EntertainmentEstates");

                    b.Navigation("EntertainmentRequests");

                    b.Navigation("HistoryNotify");

                    b.Navigation("Notifications");

                    b.Navigation("ProviderMaintenanceOrders");

                    b.Navigation("ProviderRentRatingRequests");

                    b.Navigation("ProviderSaleRatingRequests");

                    b.Navigation("PurchaseRequests");

                    b.Navigation("RentEstateFavorites");

                    b.Navigation("RentEstates");

                    b.Navigation("RentRequests");

                    b.Navigation("RentReservationRequests");

                    b.Navigation("RentalManagementOrders");

                    b.Navigation("ReportDailyRentComments");

                    b.Navigation("ReportEntertainmentComments");

                    b.Navigation("S4AddPriceToEstates");

                    b.Navigation("SaleEstateFavorites");

                    b.Navigation("SaleEstates");

                    b.Navigation("SaleReservationRequests");

                    b.Navigation("UserMaintenanceOrders");

                    b.Navigation("UserPriceToEstates");

                    b.Navigation("UserRentRatingRequests");

                    b.Navigation("UserSaleRatingRequests");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.City", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Wasit.Core.Entities.UserTables.Region", b =>
                {
                    b.Navigation("DailyRentEstates");

                    b.Navigation("EntertainmentEstates");

                    b.Navigation("MaintenanceOrders");

                    b.Navigation("RentEstates");

                    b.Navigation("RentalManagementOrders");

                    b.Navigation("SaleEstates");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
